---
title: "Comment installer Kile Live Preview ?"
author: "K√©vin Polisano"
date: "2013-04-02"
categories: [informatique]
toc: true
toc-title: "Sommaire"
toc-location: left
reference-location: margin
citation-location: margin
---

## Qu'est-ce que Kile Live Preview ?

<a href="http://fr.wikipedia.org/wiki/Kile" target="_blank" class="broken_link">Kile</a> est un √©diteur puissant pour r√©diger des documents en <a href="http://fr.wikipedia.org/wiki/LaTeX" target="_blank">LaTeX</a>. C'est LaTeX qui une fois le fichier *compil√©,* g√©n√®re un document PDF avec une mise en forme parfaite et pouvant contenir des formules math√©matiques. A chaque modification il faut donc :

1.  Revenir au fichier `.tex` pour effectuer la modification, puis enregistrer
2.  Compiler le fichier
3.  Visualiser le r√©sultat sur le PDF qui s'ouvre dans une nouvelle fen√™tre
4.  Entrevoir les futures modifications √† apporter, fermer la fen√™tre, et r√©it√©rer 1

Et ainsi de suite...

*Petite digression*

La raison pour laquelle beaucoup de gens ne se mettent pas au LaTeX est que c'est un outil de r√©daction "peu intuitif" contrairement aux logiciels <a href="http://fr.wikipedia.org/wiki/WYSIWYM" target="_blank">WYSIWYG </a>tels que "Word" qui permettent de voir directement les changements effectu√©s sur le fichier. Ces logiciels sont tr√®s bien pour le traitement de texte classique, mais on en entrevoit rapidement les limites d√®s lors que l'on souhaite r√©diger des documents scientifiques. LaTeX quant √† lui a √©t√© sp√©cialement con√ßu pour cela, mais est un langage de programmation √† part enti√®re donc n'est pas simple √† prendre en main au d√©but. Des alternatives telles que <a href="http://fr.wikipedia.org/wiki/LyX" target="_blank">LyX </a>proposent de combiner les avantages des deux √©coles, mais √† mon humble avis on perd la puissance d'ajustement et de qualit√© que permet la r√©daction directe en LaTeX.

**Le probl√®me** du LaTeX est que, m√™me une fois le langage ma√Ætris√©, on l'a vu, il faut syst√©matiquement recompiler pour visualiser le r√©sultat, et cela constitue une perte de temps non n√©gligeable lorsque l'on r√©dige des documents longs, comme une th√®se de l'ordre de 300 pages !

**La solution** s'appelle **Kile Live Preview** qui permet de r√©unir au sein de l'√©diteur Kile :

-   [une zone texte ]{style="color: #0000ff;"}[(√† gauche)]{style="color: #333333;"}
-   [une zone de visualisation ]{style="color: #ff0000;"}[(√† droite)]{style="color: #333333;"}

Comme un dessin vaut mieux qu'un long discours, voil√† une capture d'√©cran de la fen√™tre qui est maintenant coup√©e en deux.

![](images/Kile-livepreview-alpha.png)

Vous l'aurez compris, le gros avantage est qu'on peut **avoir un oeil √† la fois sur le code et sur le rendu**. De plus les deux volets sont **synchronis√©s**, ce qui signifie que d√®s que vous effectuez une modification dans le code, Kile recompile automatiquement et vous affiche le r√©sultat "en Live" en faisant correspondre l'emplacement dans le code avec la ligne de positionnement (en rouge) du rendu.

Alors, convaincus ? üòâ

## Installation de Kile Live Preview

Je vais d√©crire la d√©marche √† suivre dans le cas o√π tout fonctionne du premier coup, ce qui, en informatique qu'on se le dise, n'arrive pas tr√®s souvent... Je terminerai donc cet article par ma chasse aux bugs personnelle, m'ayant co√ªt√©e quelques heures. N√©anmoins si vous suivez la proc√©dure qui suit vous ne devriez pas rencontrer les m√™me bugs que moi, car je l'ai adapt√©e en cons√©quences.

-   [Installation de Qt]{style="color: #0000ff;"}

[L'installation a d√©j√† √©t√© d√©crite dans un [pr√©c√©dent article](../2013-03-28-comment-installer-la-librairie-libqglviewer).]{style="color: #333333;"}

-   [Installation de CMake]{style="color: #0000ff;"}

[CMake est un outil de g√©n√©ration de Makefile, tout comme l'est QMake dont j'ai d√©j√† d√©crit l'installation. Pour l'installer il suffit de se rendre sur le ]{style="color: #333333;"}<a href="http://www.cmake.org/" target="_blank">site officiel</a>, et de t√©l√©charger la derni√®re version disponible, √† ce jour `cmake-2.8.10.2.tar.gz` et de l'extraire dans un dossier :

``` bash
cd
mkdir CMAKE
cd CMAKE
tar -xzf cmake-2.8.10.2.tar.gz
```

On se place dans le dossier extrait et on configure l'installation :

``` bash
cd cmake
./configure --prefix=$HOME/CMAKE/ --qt-gui
```

Puis on compile et on installe :

``` bash
make
make install
```

Enfin on va modifier la variable `PATH` de mani√®re √† pouvoir lancer l'ex√©cutable directement par son nom. Ouvrez le fichier `.bashrc` (qui se situe en g√©n√©ral dans votre `$HOME`) et copiez la ligne suivante en fin de fichier :

``` bash
PATH=$PATH:$HOME/CMAKE/bin/
```

Fermez le fichier et dans un terminal rafra√Æchir en tapant :

``` bash
bash
```

Et voil√† l'installation de l'outil `CMake` est termin√©e.

-   [Installation des librairies KDE]{style="color: #0000ff;"}

Il est n√©cessaire d'avoir une version r√©cente (`>= 4.6`), pour conna√Ætre votre version actuelle tapez¬† dans un terminal :

``` bash
kde-config -v
```

La derni√®re version √† ce jour est `kdelibs5-dev`

``` bash
sudo apt-get install kdelibs5-dev
```

-   [Installation de Poppler]{style="color: #0000ff;"}

[Voil√† l'√©tape que j'avais omise et √† l'origine d'un seg fault qui m'a fait suer plusieurs heures. Poppler est une librairie qui permet √† Okular de visualiser des PDF, sans quoi je ne parvenais pas √† avoir de rendu, et qui en prime me faisait crasher Kile.]{style="color: #333333;"}

Rendez-vous sur le <a href="http://poppler.freedesktop.org/" target="_blank">site officiel</a> et t√©l√©chargez comme d'habitude la derni√®re version, l'extraire et se placer dans le dossier. Puis tapez les commandes suivantes :

``` bash
./configure
make
make check
make install
```

Remarque : si `make check` se solde par des √©checs sur certains tests ce n'est pas forc√©ment grave, poursuivez tout de m√™me l'installation. Pour plus de d√©tails sur celle-ci consultez le fichier `INSTALL` du dossier.

Si l'installation s'est bien d√©roul√©e les ex√©cutables pdf devraient se trouver dans le dossier `/usr/local/bin`.

-   [Installation de git]{style="color: #0000ff;"}

[`Git` est un gestionnaire de version tr√®s puissant, pour l'installer c'est tr√®s simple :]{style="color: #333333;"}

``` bash
sudo apt-get install git-core
```

-   ¬†[R√©cup√©ration des sources de Kile et d'Okular]{style="color: #0000ff;"}

[Ces deux logiciels sont en d√©veloppement libre, c'est-√†-dire que leur code source est disponible sur internet, sur des d√©p√¥ts appel√©s <em>d√©p√¥ts git. </em>On va donc dans un premier temps les r√©cup√©rer :]{style="color: #333333;"}

``` bash
cd
mkdir -p kile-livepreview/src
cd kile-livepreview/src
git clone git://anongit.kde.org/okular
git clone git://anongit.kde.org/kile -b master
```

-   [Installation d'Okular]{style="color: #0000ff;"}

``` bash
cd ..
mkdir build-okular
cd build-okular
cmake ../src/okular -DCMAKE_INSTALL_PREFIX=$HOME/kile-livepreview/install -DCMAKE_BUILD_TYPE="Debug"
make install -j 2
```

Remarque : si un bug survient au cmake, voir √©ventuellement plus bas : bug n¬∞1 et n¬∞2.

-   [Installation de Kile<br /> ]{style="color: #0000ff;"}

    </p>

    ``` bash
    cd ..
    mkdir build-kile
    cd build-kile
    cmake ../src/kile -DCMAKE_INCLUDE_PATH=$HOME/kile-livepreview/install/include/ -DCMAKE_INSTALL_PREFIX=$HOME/kile-livepreview/install -DCMAKE_BUILD_TYPE="Debug"
    make install -j 2
    ```

-   ¬†[Script de lancement de l'application Kile Live Preview]{style="color: #0000ff;"}

Les lignes suivantes doivent √™tre copi√©es dans le fichier `$HOME/kile-livepreview/run.sh` :

``` bash
#!/bin/sh
export KDEDIRS=$HOME/kile-livepreview/install/:$KDEDIRS
export KDEHOME=$HOME/kile-livepreview/.kde
export LD_LIBRARY_PATH=$HOME/kile-livepreview/install/lib64:$HOME/kile-livepreview/install/lib:$LD_LIBRARY_PATH

kbuildsycoca4 $HOME/kile-livepreview/install/bin/kile
```

Il faut √©galement rajouter √† la suite des export le dossier `Poppler` (votre chemin complet vers celui-ci) aux variables d'environnement suivantes :

``` bash
export PKG_CONFIG_PATH=$HOME/poppler-0.22.2:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=$HOME/poppler-0.22.2:$LD_LIBRARY_PATH
```

Enfin il faut donner la permission d'ex√©cution du script :

``` bash
chmod +x $HOME/kile-livepreview/run.sh
```

Finalement pour lancer Kile vous tapez :

``` bash
$HOME/kile-livepreview/run.sh
```

... et priez pour que √ßa marche ! üôÇ

-   [Chasse aux bugs !]{style="color: #008000;"}<br />

Voici la liste des bugs que j'ai obtenu :

-   [Bug n¬∞1 ]{style="color: #ff0000;"}[: Lors de l'utilisation du `cmake` j'obtenais l'erreur suivante :]{style="color: #333333;"}

``` bash
CMake Error: ERROR: cmake/modules/FindKDE4Internal.cmake not found
```

Un outil int√©ressant pour savoir √† quelle librairie appartient un fichier donn√© est `apt-file`

``` bash
sudo apt-get install apt-file
```

Pour rechercher √† quelle librairie est rattach√© un fichier de nom `<filename>` il suffit alors de taper `apt-file search <filename>` donc dans mon cas :

``` bash
apt-file search FindKDE4Internal.cmake
```

Et la sortie correspondante est :

``` bash
kdelibs5-dev: /usr/lib/kde4/share/kde4/apps/cmake/modules/FindKDE4Internal.cmake
```

On comprends alors qu'il est n√©cessaire d'installer la librairie `kdelibs5-dev` :

``` bash
sudo apt-get install kdelibs5-dev
```

Le bug est corrig√©.

-   [Bug n¬∞2 ]{style="color: #ff0000;"}[: Toujours au¬†`cmake` l'erreur suivante est survenue :]{style="color: #333333;"}

``` bash
Could NOT find QImageBlitz (missing: QIMAGEBLITZ_INCLUDES QIMAGEBLITZ_LIBRARIES)
```

A partir de la logith√®que Ubuntu j'ai install√© `libqimageblitz4` et `libqimageblitz-dev`, le bug fut alors corrig√©.

-   [Bug n¬∞3 ]{style="color: #ff0000;"}[: pas des moindres ! Crash de Kile √† l'ouverture d'un fichier `.tex`]{style="color: #333333;"}

``` bash
Could not open /home/kevin/kile-livepreview/.kde/share/apps/kile/livepreview/preview-ONaCzE//essai.pdf
```

Le fichier `essai.tex` √©tait un simple exemple minimaliste :

``` bash
\documentclass[12pt]{article}
\begin{document}
\section*{My section}
Test 
\end{document}
```

Puis un simple clic dans la fen√™tre faisait crasher l'application. J'ai alors examin√© le `backtrace` dont je n'extrais que les lignes int√©ressantes :

``` bash
Application: Kile (kile), signal: 
Aborted Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[Current thread is 1 (Thread 0x7f60c152c780 (LWP 21865))]

Thread 1 (Thread 0x7f60c152c780 (LWP 21865)): [KCrash Handler]
#6 0x00007f60bcef6425 in __GI_raise (sig=<optimized out>) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64
#7 0x00007f60bcef9b8b in __GI_abort () at abort.c:91 
#8 0x00007f60be75150b in qt_message_output(QtMsgType, char const*) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4
#9 0x00007f60be7518bf in ?? () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 
#10 0x00007f60be751a64 in qFatal(char const*, ...) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 
#11 0x00007f6096a49841 in Okular::DocumentPrivate::openDocumentInternal (this=0x1b9b160, offer=..., isstdin=false, docFile=..., filedata=...) at /home/kevin/kile-livepreview/src/okular/core/document.cpp:904 
#12 0x00007f6096a5193d in Okular::Document::openDocument (this=0x1b33b30, docFile=..., url=..., _mime=...) at /home/kevin/kile-livepreview/src/okular/core/document.cpp:1996 
#13 0x00007f6096d2409e in Okular::Part::openFile (this=0x1941030) at /home/kevin/kile-livepreview/src/okular/part.cpp:1203
```

On constate que l'erreur est survenue dans la fonction `openDocumentInternal` du fichier `document.cpp` et que celle-ci est lev√©e par l'exception `qFatal`. En allant voir √† la ligne correspondante du fichier on voit que c'est cette ligne qui provoque l'exception :

``` bash
Q_ASSERT_X( m_generator, "Document::load()", "null generator?!" );"
```

Ce qui signifie que le pointeur `m_generator est le pointeur NULL` ! Pour comprendre pourquoi, il m'a fallu rep√©rer o√π ce pointeur √©tait initialis√©, c'est le r√¥le de la fonction `loadGeneratorLibrary`, et plus pr√©cis√©ment de cette ligne :

``` bash
Generator * generator = factory->create< Okular::Generator >( service->pluginKeyword(), 0 );
```

En affichant la valeur de la variable `service->pluginKeyword()` j'ai constat√© que celle-ci √©tait vide ! Donc qu'il devait certainement manquer un plugin quelque part. Afin de savoir de quel plugin il s'agissait j'ai affich√© le nom de la QString¬†`service->name()`

``` bash
qDebug("%s",service->name().toAscii().data());
```

Ce qui me renvoya `"Poppler"`. En effet aucun dossier de ce nom ne figurait dans le dossier `build_okular/generators` et pourtant il est pr√©sent dans les sources `src/generators`. Autrement dit lors du `cmake` la librairie Poppler n'a pas √©t√© prise en consid√©ration (comme en t√©moignait le Makefile dans lequel seule la librairie Poppler ne poss√©dait pas de cible), et pour cause : je ne l'avais pas install√© au pr√©alable comme il l'est fortement recommand√© sur le <a href="http://okular.kde.org/download.php" target="_blank">site d'Okular</a>, qui en a besoin pour certaines manipulations du format PDF.

J'ai donc tout supprim√© et j'ai recommenc√© l'installation par d√©pot `Git` [apr√®s]{style="text-decoration: underline;"} avoir install√© la librairie Poppler.

[Si chez vous d'autres bugs surviennent, laissez moi un commentaire ou signalez le <a href="https://bugs.kde.org/" target="_blank">ici</a>.]{style="color: #333333;"}
