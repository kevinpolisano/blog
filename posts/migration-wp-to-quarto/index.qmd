---
title: "Migrer son blog Wordpress vers un blog Quarto statique hébergé gratuitement avec Github Pages"
author: "Kévin Polisano"
date: "2024-12-26"
categories: [site]
toc: true
toc-title: "Sommaire"
toc-location: left
reference-location: margin
citation-location: margin
---

Mon site perso fait peau neuve !

Je vous explique ici quelles étapes j'ai suivi pour effectuer la migration. Au boulot !

![](thumbnail.jpg)

## Créer son blog avec Quarto

-   Ouvrir `RStudio`
-   Créer un nouveau projet `Create Quarto Blog`
-   Cocher `Create a git repository`

Un [blog Quarto](https://quarto.org/docs/websites/website-blog.html) vierge est ainsi créé contenant ces fichiers :

-   `_quarto.yml` : Fichier du projet Quarto
-   `index.qmd` : Page d'accueil
-   `about.qmd` : Page "À propos"
-   `posts/` : Répertoire contenant les posts en Quarto Markdown (`.qmd`)
-   `posts/_metadata.yml` : Options partagées des posts
-   `styles.css` : CSS customisé pour le style du blog
-   `MyBlog.Rproj` : Raccourci d'ouverture du projet Quarto

Dans le fichier `_quarto.yml` ajoutez la ligne `output-dir` pour renseigner le répertoire cible pour la génération du site :

``` yaml
project:
  type: website
  output-dir: docs
```

Enfin pour le générer et avoir le rendu du blog il suffit d'exécuter `build > Render Website`

## Héberger son blog avec GitHub pages

### Déployer le blog

Après avoir créer un nouveau dépôt sur GitHub à partir du `.git` créé en local, on va dans `Settings > Pages` puis dans `Build and deployment` on choisit comme source `Deploy from a branch`. On sélectionne la branche `main` et le dossier `/docs` puis on valide avec `save`. Après quelques minutes le lien vers la page du blog est généré : `kevinpolisano.github.io`

### Nom de domaine customisé

L'hébergeur de mon site WP était [o2switch](https://www.o2switch.fr/), que je recommande pour la grande réactivité de leur service technique.

**Du côté de ce registar** voici les étapes à suivre :

-   Dans `Espace client > Commander un service` choisir `Commander un nom de domaine` (pour ma part : `kevinpolisano.fr`)
-   Dans `Espace technique > Domaines configurés` remplir `Configurer un nom de domaine` (pour ma part : `kevinpolisano.fr`) puis activer `Let's Encrypt SSL` dans l'onglet `Sécurité` du cPanel.
-   Dans `Espace technique > Zone Editor` entrer les champs suivants (à adapter pour votre blog) :\

| Nom                   | TLL   | Type  | Enregistrement          |
|-----------------------|-------|-------|-------------------------|
| www.kevinpolisano.fr. | 14400 | CNAME | kevinpolisano.github.io |
| kevinpolisano.fr.     | 14400 | A     | 185.199.108.153         |
| kevinpolisano.fr.     | 14400 | A     | 185.199.109.153         |
| kevinpolisano.fr.     | 14400 | A     | 185.199.110.153         |
| kevinpolisano.fr.     | 14400 | A     | 185.199.111.153         |

-   J'ai également créé un fichier `CNAME` à la racine du dépôt git, contenant la ligne `www.kevinpolisano.fr`.

**Du côté de GitHub Pages** voici les étapes à suivre :

-   Dans `Custom Domain` renseigner le nouveau nom de domaine `www.kevinpolisano.fr` puis cliquer sur `save`. À ce stade j'ai obtenu à tour de rôle les messages d'erreurs suivants :

::: callout-important
DNS check unsuccessful

Both kevinpolisano.fr and its alternate name are improperly configured Domain does not resolve to the GitHub Pages server. For more information, see documentation (NotServedByPagesError).
:::

::: callout-warning
DNS valid for primary

kevinpolisano.fr is improperly configured Domain does not resolve to the GitHub Pages server. For more information, see documentation (NotServedByPagesError).
:::

-   J'ai du attendre quelques heures pour que la propagation du DNS soit effective. On peut suivre celle-ci sur [DNS Checker](https://dnschecker.org/) en s'assurant pour le domaine racine `kevinpolisano.fr` que les enregistrements `A` pointent vers les IP GitHub Pages; et pour le sous-domaine `www.kevinpolisano.fr` que l'enregistrement `CNAME` pointe vers `kevinpolisano.github.io`.

-   Une fois que le bouton `save` donne `DNS check successful` on coche `Enforce HTTPS` et on vérifie qu'en tapant `kevinpolisano.fr` dans la barre de navigateur on est bien redirigé vers le blog à l'adresse `https://www.kevinpolisano.fr/`

## Exporter ses articles Wordpress en HTML vers Markdown

J'ai expérimenté trois solutions :

1.  [GitHub - SchumacherFM/wordpress-to-hugo-exporter](https://github.com/SchumacherFM/wordpress-to-hugo-exporter)
2.  [GitHub - lonekorean/wordpress-export-to-markdown](https://github.com/lonekorean/wordpress-export-to-markdown)
3.  [GitHub - palaniraja/blog2md](https://github.com/palaniraja/blog2md)

La première conserve certaines balises HTML (typiquement pour l'usage de la couleur et la mise en forme), tandis que les deux suivantes exportent en pur Markdown.

### Wordpress to Hugo Exporter

La première solution consiste à *uploader* l'archive sur le site WP dans le dossier `wp-content/plugins` puis d'activer le plugin et utiliser `Outils > Export Hugo`. Ce dernier n'a pas fonctionné donc j'ai utilisé le Terminal de mon serveur d'hébergement (O2switch) (comme expliqué [ici](file:///Users/polisank/Zotero/storage/ERLHNLWT/jai-enfin-migre-de-wordpress-a-hugo-partie-2.html)) :

``` bash
cd wp-content/plugins/wordpress-to-hugo-exporter/
php hugo-export-cli.php
```

Le script créé un fichier `/tmp/wp-hugo.zip` (cela peut prendre quelques minutes). Dans le gestionnaire de fichiers (*via* le Cpanel d'O2switch) j'ai effectué une recherche du fichier, il m'indique que celui-ci se trouve dans le dossier caché `.cagefs/tmp/`.

### Wordpress export to Markdown

Premièrement on effectue un export du contenu complet de WP au format `export.xml`, que l'on place dans l'archive du code téléchargé. Puis on exécute le script :

``` bash
npm install && node index.js
```

### Blog2md

De même on exécute :

``` bash
npm install && node index.js w export.xml out
```

## Nettoyage des articles exportés, liens, images, ...

