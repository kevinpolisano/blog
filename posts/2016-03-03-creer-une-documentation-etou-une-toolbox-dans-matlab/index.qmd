---
title: "CrÃ©er une documentation et/ou une Toolbox dans Matlab"
author: "KÃ©vin Polisano"
date: "2016-03-03"
categories: [matlab]
toc: true
toc-title: "Sommaire"
toc-location: left
reference-location: margin
citation-location: margin
image: images/structure-code-matlab-explications.png
lightbox:
  match: auto
  effect: fade
  desc-position: right
  loop: true
---

Cet article va vous expliquer comment crÃ©er une jolie doc pour vos programmes Matlab ğŸ™‚

A titre d'exemple, voici le lien vers la documentation de la Toolbox de mon dernier papier de recherche (voir rubrique Publications pour tÃ©lÃ©charger l'archive des sources) :

[Mon exemple de documentation html](doc-matlab-exemple/index.html)

dont je vous extrais une partie en screenshot :

![](images/extrait-doc-matlab.png)

Si c'est le genre de doc que vous voulez rÃ©alisez, vous Ãªtes Ã  la bonne adresse ! ğŸ˜‰

## Structurer son code Matlab en bonne et due forme

La premiÃ¨re chose Ã  faire, pour Ãªtre en mesure de gÃ©nÃ©rer une page html comportant le code ainsi que les figures obtenues par celui-ci, est de le structurer de maniÃ¨re Ã  ce que la commande `publish` puisse identifier les diffÃ©rentes zones : titre, parties, code, etc.

Ci-dessous la visualisation de ma fenÃªtre d'Ã©dition, montrant la structuration du code correspondant au screenshot prÃ©cÃ©dent :

![](images/structure-code-matlab-explications.png)

- **Titre** : dÃ©crit en une ligne (appelÃ©e ligne H1) la fonction principale de votre fichier, et doit se situer tout en haut, pour apparaÃ®tre en orange dans le titre du html, prÃ©cÃ©dÃ© obligatoirement de deux pourcents `%%` : 

```matlab
%% Denoising and deblurring an image containing K blurred lines
```
 _Note : c'est cette ligne de code qui apparaÃ®tra Ã©galement dans le fichier Contents.m._
 
- **Description** : accolÃ©es juste en dessous du titre, ces quelques lignes permettent de prÃ©ciser un peu plus en dÃ©tail le rÃ´le jouÃ© par votre script/fonction, son fonctionnement, ses entrÃ©es/sorties, etc. Elles sont prÃ©cÃ©dÃ©es d'un seul `%` : 

```matlab
%% Denoising and deblurring an image containing K blurred lines 
% \* Generate $K$ lines with parameters $(\\theta\_k,\\alpha\_k,\\eta\_k)$, 
% blurred with a spread, in an image of size $W\\times H$ degraded by noise 
% \* Launch the minimization algorithm with parameters $(Nbiter,\\rho,\\tau,c)$ 
% \* From the solution $\\hat w\_r^{\\ast}$, estimate the lines by Prony
```

_Note : les \* suivi d'un espace dans un commentaire sont interprÃ©tÃ©s comme des puces, tandis que \*texte\* (sans espace) affichera le texte en gras. Pour plus de dÃ©tails sur la mise en forme du texte voir [ici](http://fr.mathworks.com/help/matlab/matlab_prog/marking-up-matlab-comments-for-publishing.html#btj5hz8-1)._

- **Titre des sous parties** : permet de diviser le fichier en plusieurs parties et de crÃ©er une table des matiÃ¨res 'Contents' comme vous pouvez le voir sur le premier screenshot. Ces noms de parties sont repÃ©rÃ©es par deux pourcents `%%` : 
```matlab
%% DATA GENERATION
```
- **Texte explicatif** : vous permet d'insÃ©rer des explications afin d'articuler et d'Ã©claircir les encadrÃ©s comportant du code, et peut Ã©ventuellement comporter des formules $\\LaTeX$, il se prÃ©sente sous la forme suivante :
```matlab
%%% Add current folder and subfolders to the path
```
 _Note : il est Ã©galement possible d'insÃ©rer Ã  cet endroit des liens, des images, etc._
 
- **Code** : vous permet d'insÃ©rer du code dans un encadrÃ©, avec les commentaires associÃ©s, les lignes ne sont prÃ©cÃ©dÃ©s d'aucun symbole `%` : 
```matlab
tmp=which('main');Â Â Â Â Â Â Â Â Â  % complete path to the main file  index=strfind(tmp,'/');Â Â Â Â Â Â  % index of '/' into the string tmp   p=tmp(1:index(end));Â Â Â Â Â Â Â  % folder which contains the file 
addpath(genpath(p));Â Â Â Â Â Â Â  % add folder and its subfolders to the path 
clear tmp p indexÂ Â Â Â Â Â Â Â Â Â Â Â  % clear these temporary variables
```

## GÃ©nÃ©rer la doc html de chaque fichier .m via la commande publish

Une fois votre code correctement structurÃ©, vous pouvez gÃ©nÃ©rer la page html correspondante de l'une des deux faÃ§ons suivantes :

Cliquez sur l'**onglet PUBLISH** en haut de la fenÃªtre d'Ã©dition, puis le bouton `Publish` pour gÃ©nÃ©rer la doc html. Un dossier html sera crÃ©Ã© dans le rÃ©pertoire contenant votre fichier filename.m, contenant une page `filename.html` et des images utilisÃ©es dans celle-ci.

![](images/generer-doc-matlab.png)

Autre mÃ©thode : tapez la commande suivante dans la fenÃªtre de commande Matlab

```matlab
publish('filename.m')
```

Vous pouvez Ã©galement spÃ©cifier un certain nombre d'options tels que le format de la publication (par dÃ©faut html, mais possible en $\\LaTeX$, en .doc ou encore .ppt), son emplacement, etc. Pour plus d'information consulter la doc de [publish](http://fr.mathworks.com/help/matlab/ref/publish.html?refresh=true).

```matlab
publish('index.m',struct('format','html','outputDir','doc'));
```

Pour rÃ©sumer cette partie vous pouvez Ã©galement vous rÃ©fÃ©rer Ã  cette [aide Matlab](http://fr.mathworks.com/help/matlab/matlab_prog/publishing-matlab-code.html).

## CrÃ©er un index pour organiser les pages html entre elles

Une fois gÃ©nÃ©rÃ©es toutes les pages html au sein d'un mÃªme rÃ©pertoire, il peut Ãªtre utile de les "regrouper" au sein d'une mÃªme page, disons index.html, contenant des liens pointant vers ces pages.

Pour cela, on crÃ©Ã© de mÃªme un fichier index.m, qui prÃ©sente la mÃªme structure de code dÃ©crite prÃ©cÃ©demment, et que l'on va Ã©galement convertir en `index.html` via la commande _publish_ :

```matlab
%% Convex Super-Resolution Detection of Lines in Images

%% Main functions

%%
% * <data_generation.html Data Generation>
% * <minimization_Chambolle.html Minimization Algorithm>
% * <resynthesis.html Resynthesis>
% * <prony.html Prony Estimation>

%% Tests

%%
% * <noiseless.html Experiment 1 : normal blur and noiseless>
% * <strong_noise.html Experiment 2 : normal blur and strong noise>
% * <strong_blur.html Experiment 3 : strong blur and noiseless>
% * <hough_lines_detection.html Hough lines detection>
% * <radon_lines_detection.html Radon lines detection>
```

Ici la **mise en forme pour un lien** dont le nom est "texte" pointant vers le fichier `filename.html` est la suivante :

**<filename.html texte>**

Le rÃ©sultat est le suivant :

![](images/example-bibliography-matlab.png)Pour afficher la page html Ã  partir de la fenÃªtre de commande Matlab, tapez :

```matlab
 web('chemin_vers_repertoire/index.html','-helpbrowser')
```

L'option `'-helpbrower'` permet d'ouvrir l'index et de naviguer entre les pages dans le "Help Browser" de Matlab, ce qui est plus commode. Si on ne spÃ©cifie pas cette option c'est votre navigateur web qui s'en chargera.

## Produire une Toolbox accessible dans le _Help Browser_ de Matlab

Maintenant que notre documentation html est complÃ¨tement gÃ©nÃ©rÃ©e, on peut vouloir en faire une Toolbox rÃ©fÃ©rencÃ©e dans Matlab. Cette procÃ©dure s'appuie sur deux fichiers que nous allons crÃ©er :

- `info.xml` : qui permet de trouver et d'**identifier vos pages** de documentation.
- `helptoc.xml` : qui permet de **crÃ©er une table des matiÃ¨res** de la documentation et permet de l'afficher dans "Contents pane" (Ã  gauche) de votre "Help Browser".

Le fichier `info.xml` doit se situer dans le mÃªme rÃ©pertoire que vos pages html de documentation, et ressembler Ã  ceci :

```matlab
<productinfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="optional">
    <?xml-stylesheet type="text/xsl"href="optional"?>

    <matlabrelease>2013a</matlabrelease>
    <name>Convex Super-Resolution Detection of Lines in Images</name>
    <type>toolbox</type>
    <icon></icon>
    <help_location>../doc</help_location>

</productinfo>
```

Changer le nom de la Toolbox par le vÃ´tre dans la balise <name>, et la version de matlab dans <matlabrelease> (qui n'a pas d'effet en rÃ©alitÃ©, juste Ã  titre informatif). La seule chose que **vous devez impÃ©rativement renseigner est le chemin vers le rÃ©pertoire qui contient info.xml** et les pages html dans la balise **<help\_location>**.

Exemple : dans mon cas, je l'ai mentionnÃ© en relatif, en effet mon fichier `info.xml` Ã©tant situÃ© dans le rÃ©pertoire `doc/`, le chemin vers doc, relativement Ã  `info.xml`, est bien `../doc`.

En fait, quand le rÃ©pertoire `doc/` contenant vos pages html et `info.xml` va Ãªtre ajoutÃ© au path de Matlab, il va identifier le fichier `info.xml`, et renseigner la position de votre Toolbox en consultant la balise <help\_location>.

_Note : pour ajouter un rÃ©pertoire au path faites un clic droit sur celui-ci et choisissez `Add to Path`, ou bien en ligne de commande `addpath('chemin\_vers\_repertoire')`. Pour ajouter tous les dossiers et sous dossiers de votre rÃ©pertoire de travail au path, voir le code de l'encadrÃ© bleu de l'image plus haut, qui utilise les commandes `which` et `genpath`._

**Attention** : si vous modifiez le fichier `info.xml` ou `helptoc.xml`, il vous faudra retirer du path le rÃ©pertoire les contenant, puis la rajouter au path pour prendre en compte les modifications.

![](images/add-remove-path-matlab.png)

Le fichier `helptoc.xml` doit Ã©galement se situer dans le mÃªme rÃ©pertoire que les pages html de documentation. Il permet de crÃ©er une table des matiÃ¨res de votre documentation (comme son nom l'indique toc = table of contents). Il se prÃ©sente sous cette forme :

```xml
<?xml version='1.0' encoding="utf-8"?>
<toc version="2.0">

    <tocitem target="index.html">Convex Super-Resolution Detection of Lines in Images
       <tocitem target="main.html">Main functions
           <tocitem target="data_generation.html">Data Generation</tocitem>
           <tocitem target="minimization_Chambolle.html">Minimization Algorithm</tocitem>
           <tocitem target="resynthesis.html">Resynthesis</tocitem>
           <tocitem target="prony.html">Prony Estimation</tocitem>
       </tocitem>
       <tocitem target="main.html">Tests
           <tocitem target="noiseless.html">Experiment 1 : normal blur and noiseless</tocitem>
           <tocitem target="strong_noise.html">Experiment 2 : normal blur and strong noise</tocitem>
           <tocitem target="strong_blur.html">Experiment 3 : strong blur and noiseless</tocitem>
           <tocitem target="hough_lines_detection.html">Hough lines detection</tocitem>
           <tocitem target="radon_lines_detection.html">Radon lines detection</tocitem>

       </tocitem>
    </tocitem>

</toc>
```

AprÃ¨s avoir retirer/ajouter du path le rÃ©pertoire de votre documentation, vous pouvez visualiser le rÃ©sultat comme suit :

- Cliquer sur `Help>Documentation` dans la barre d'outil
- Puis tout en bas de la fenÃªtre qui s'ouvre, cliquez sur `Supplemental Software` (qui contient vos Toolbox).
- Cela ouvre conjointement le `Help Browser` sur le fichier `index.html` (dans mon cas, voir les tocitem ci-dessus qui le spÃ©cifie) ainsi qu'une **table des matiÃ¨res Ã  gauche** qui vous permet de naviguer au sein de la documentation de votre Toolbox ainsi hiÃ©rarchisÃ©e.

En images :

::: {layout-ncol=3}

![](images/matlab-help.png){width=33% group="my-gallery"}


![](images/matlab-supplemental-software-content.png){width=33% group="my-gallery"}

![](images/supplemental-software-matlab.png){width=33% group="my-gallery"}

:::

Ou plus rapide Ã  partir de la fenÃªtre de commande, tapez simplement :

```matlab
doc -classic
```

Enfin vous pouvez crÃ©er une entrÃ©e dans la base de donnÃ©e de Matlab pour effectuer une recherche de vos pages de documentation inhÃ©rentes Ã  votre Toolbox en tapant :

```matlab
builddocsearchdb('chemin_vers_repertoire')
```

La procÃ©dure est rÃ©capitulÃ©e dans cette [aide Matlab](http://fr.mathworks.com/help/matlab/matlab_prog/display-custom-documentation.html).

## Annexe 1 : gÃ©nÃ©rer un fichier Contents.m listant tous les _help descriptions_

En derniÃ¨re analyse, il me semble intÃ©ressant de disposer d'une liste de tous les fichiers `.m` avec leur description associÃ©e, et de pouvoir s'y rÃ©fÃ©rer rapidement via la commande help.

C'est le rÃ´le du fichier `Contents.m` qui se gÃ©nÃ¨re en cliquant sur :

`Current Folder>Reports>Contents Report`

![](images/reports-contents.png)

Cela crÃ©Ã© le fichier Contents.m contenant la liste des fichiers .m ainsi que leur description. Si vous avez respectÃ© la structure du code suggÃ©rÃ©, la description succinte correspond Ã  la premiÃ¨re ligne H1 du fichier. Le rÃ©pertoire qui contient mes fichiers .m se nomme "main functions" comme vous pouvez le voir dans la barre d'adresse. Ainsi en tapant :

```matlab
help 'main functions'
```

On visualise la description de toutes les fonctions du rÃ©pertoire :

![](images/help-documentation.png)

**AmÃ©liorons encore un peu les choses**. Imaginons que nos fichiers `.m` sont rÃ©partis dans plusieurs rÃ©pertoires. On peut bien Ã©videmment rÃ©pÃ©ter la mÃªme opÃ©ration dans chaque rÃ©pertoire, mais cela peut rapidement s'avÃ©rer pÃ©nible si la Toolbox contient un grand nombre de rÃ©pertoires. Par consÃ©quent, on aimerait pouvoir effectuer rÃ©cursivement cette tÃ¢che. C'est ce que propose la fonction [update\_contents](http://www.mathworks.com/matlabcentral/fileexchange/53127-recursive-contents-report) (qui requiert la fonction [get\_contents](http://www.mathworks.com/matlabcentral/fileexchange/30835-get-contents)). Ainsi en tapant :

```matlab
update_contents('chemin_repertoire_principal')
```

Cela crÃ©Ã© un unique fichier `Contents.m` Ã  la racine qui a cette tÃªte :

```matlab
% MATLAB CODE
% 
%   Contents file for MATLAB CODE and its subfolders.
%   
%   MATLAB CODE
%   main                     - Denoising and deblurring an image containing K blurred lines
%   make_doc                 - Generate a html documentation in folder doc/
%   
%   MATLAB CODE/MAIN FUNCTIONS
%   data_generation          - Generate K lines in a degraded image
%   minimization_Chambolle   - Minimization algorithm - relaxed Chambolle-Pock version
%   minimization_Condat      - Minimization algorithm - based on Condat's framework
%   prony                    - Recovering parameters of lines by the Prony method
%   resynthesis              - The denoised image xstar
%   
%   MATLAB CODE/TESTS
%   hough_lines_detection    - Hough transform applied to lines detection
%   noiseless                - Deblurred and estimate parameters of K blurred lines with high accuracy
%   radon_lines_detection    - Radon transform applied to lines detection
%   strong_blur              - Deblurred an image containing K strong blurred lines
%   strong_noise             - Denoising an image containing K blurred lines
%
%   MATLAB CODE/AUXILIARY FUNCTIONS
%   adjconv                  - Check the expression of the adjoint of a convolution
%   convmat                  - Check the equivalence between matrix product and operator convolution
%   Dirichlet_Kernel         - Dirichlet Kernel expression
%   dot2                     - Canonical inner product on complex vectors
%   dotF                     - Frobenius inner product
%   dotH                     - Inner product defined on space H=WxQ
%   dotQ                     - Inner product defined on space Q
%   dotQC                    - Inner production defined on space QC
%   dotW                     - Inner product defined on space W
%   dotWC                    - Inner product defined on space WC
%   dotWL                    - Inner product defined on space WL
%   FastPeakFind             - Analyze noisy 2D images and find peaks using local maxima
%   fixPSlinestyle           - Fix line styles in exported post script files
%   get_contents             - Get the contents of a specified directory
%   gradient                 - Of the operator A
%   normW                    - Norm defined on space W
%   opA                      - Operator A
%   opadjA                   - Adjoint of the operator A
%   opadjL1                  - Adjoint of the operator L1
%   opadjL2                  - Adjoint of the operator L2
%   opadjL3                  - Adjoint of the operator L3
%   opadjL4                  - Adjoint of the operator L4
%   opL1                     - Operator L1=L3+L4
%   opL2                     - Operator L2
%   opL3                     - Operator L3
%   opL4                     - Operator L4
%   proxsigmahconj           - Proximal operator of H*
%   proxsigmahNconj          - Proximal operator of H_N*
%   proxtaug                 - Proximal operator of G
%   proxtaugfour             - Proximal operator of G by FFT
%   proxtaugmat              - Proximal operator of G involving a big Kronecker product
%   proxtaugmat2             - Proximal operator of g involving M+1 smaller matrix products
%   test_adjoints            - Test adjoints
%   test_parametres_algo1    - Test which is the best parameters (tau,sigma) to perform minimization 1
%   test_parametres_algo2    - Test which is the best parameters (tau,sigma) to perform minimization 2
%   tightfig                 - Remove excess space around the figure
%   update_contents          - Create a Contents.m file including subdirectories
%    
%   This file was generated by update_contents.m .
%    
%   02-Mar-2016 17:46:52 .
```

## Annexe 2 : gÃ©nÃ©rer la documentation dans un fichier .pdf ou .tex

### **CommenÃ§ons par l'export au format .pdf**

Pour cela cliquez sur `Publish>Edit Publishing Options` puis choisissez `Output file>pdf`

![](images/matlab-bouton-publish.png) ou bien en ligne de commande :

```matlab
publish('filename.m',struct('format','pdf'));
```

Si vous Ãªtes aussi pointilleux que moi, vous estimerez peut-Ãªtre que **les formules** $\\LaTeX$ **ainsi gÃ©nÃ©rÃ©es sont trop petites et floutÃ©es.** Si tel est le cas alors voici la [procÃ©dure](http://stackoverflow.com/questions/21948601/how-to-set-the-font-settings-in-pdf-publish-via-matlab-and-Latex) Ã  suivre pour y remÃ©dier :

- Nous allons **modifier la commande _publish_**, pour cela commenÃ§ons par dÃ©terminer son emplacement via la commande _which_.

```bash
which('publish')
```

- Rendez-vous dans le rÃ©pertoire la contenant (pour ma part codetools), ouvrez la avec votre Ã©diteur prÃ©fÃ©rÃ© (Ã©ventuellement en mode root pour avoir la permission de modifier le fichier). Allez Ã  la ligne 780 (pour les utilisateurs de Matlab R2013a), et **modifier la valeur de** `FontSize`, par exemple prenez 30 au lieu de 22 :

```matlab
temptext = text('Parent',tempaxes,'Position',[.5 .5], ...
    'HorizontalAlignment','center','FontSize',22, ...
    'Interpreter','latex');
```

- Allez ensuite Ã  la ligne 717, et **remplacer la ligne suivante** :

```matlab
swapTexForImg(dom,equationNode,outputDir,fullFilename,equationText,newSize(2),newSize(1))
```

par :

```matlab
    swapTexForImg(dom,equationNode,outputDir,fullFilename,equationText,newSize(2)/scale,newSize(1)/scale)
```

avec `scale` un facteur de votre choix, par exemple 2.

- **Enregistrer les modifications**, et **tapez** successivement dans la fenÃªtre des commandes :

```matlab
rehash toolboxcache
```

```matlab
clear functions
```

- **Relancer la commande publish**, le tour est jouÃ© !

Les formules apparaissent plus grandes, moins floutÃ©es et donc plus lisibles.

NÃ©anmoins elles ne sont toujours pas parfaites, pour la simple et bonne raison qu'elles sont converties en image bitmap (png par dÃ©faut) avant d'Ãªtre insÃ©rÃ©es dans le pdf. Une autre faÃ§on de procÃ©der est de gÃ©nÃ©rer un fichier .tex pour la doc puis de la compiler pour obtenir dans le `.pdf` produit des formules vectorielles.

### Comment gÃ©nÃ©rer un fichier .tex de documentation via la commande publish ?

Pour cela tapez la commande :

```matlab
publish('filename.m',struct('format','latex'));
```

puis compiler le `.tex` gÃ©nÃ©rÃ© avec votre Ã©diteur $\\LaTeX$ favori.

Le rÃ©sultat pour les formules est maintenant impeccable!

Malheureusement c'est maintenant au tour du code de ne plus Ãªtre formatÃ© aussi bien qu'en html ou en pdf, puisqu'il est converti de maniÃ¨re brute **dans un environnement verbatim**. Pour y remÃ©dier, vous pouvez :

- Soit **retoucher manuellement** le fichier `.tex` en utilisant par exemple [lstlisting](https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings)
- Soit **changer le style** en l'indiquant directement Ã  la commande `publish`

Dans ce dernier cas, il vous faut inventer Ã  votre sauce un fichier `matlab2latex\_pretty.xsl` qui spÃ©cifie le style que vous dÃ©sirez donner au code, et taper :

```matlab
publish('filename.m',struct('format','latex','stylesheet','matlab2latex_pretty.xsl'));
```

**VoilÃ  le tuto est terminÃ©, j'espÃ¨re qu'il vous aura Ã©tÃ© utile** ğŸ™‚
